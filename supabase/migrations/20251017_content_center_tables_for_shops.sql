-- Migration: Content Creation Center Tables (Modified for shops table)
-- Date: 2025-10-17
-- Description: Create tables for Content Creation Center feature
--   Modified to use shops(id) instead of auth.users(id) as foreign key
--   - content_samples: Shop-uploaded writing samples for voice profile training
--   - brand_voice_profiles: AI-generated brand voice profiles
--   - generated_content: Content pieces generated by the system

-- Enable UUID extension if not already enabled
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ============================================================================
-- TABLE: content_samples
-- Description: Stores shop-uploaded content samples for voice profile training
-- ============================================================================
CREATE TABLE IF NOT EXISTS content_samples (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES shops(id) ON DELETE CASCADE,
  sample_text TEXT NOT NULL,
  sample_type VARCHAR(50) NOT NULL CHECK (sample_type IN ('blog', 'email', 'description', 'other')),
  word_count INTEGER NOT NULL CHECK (word_count >= 500 AND word_count <= 5000),
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_content_samples_user_id ON content_samples(user_id);
CREATE INDEX idx_content_samples_active ON content_samples(user_id, is_active) WHERE is_active = true;
CREATE INDEX idx_content_samples_created ON content_samples(user_id, created_at DESC);

-- Trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_content_samples_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_content_samples_updated_at
  BEFORE UPDATE ON content_samples
  FOR EACH ROW
  EXECUTE FUNCTION update_content_samples_updated_at();

-- Limit to 10 samples per shop (5 active + 5 inactive buffer)
CREATE OR REPLACE FUNCTION check_sample_limit()
RETURNS TRIGGER AS $$
BEGIN
  IF (SELECT COUNT(*) FROM content_samples WHERE user_id = NEW.user_id) >= 10 THEN
    RAISE EXCEPTION 'Maximum 10 samples per user allowed';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER enforce_sample_limit
  BEFORE INSERT ON content_samples
  FOR EACH ROW
  EXECUTE FUNCTION check_sample_limit();

-- RLS Policies - Allow service role full access (API routes use service role)
ALTER TABLE content_samples ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Service role can manage content samples"
  ON content_samples FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- ============================================================================
-- TABLE: brand_voice_profiles
-- Description: AI-generated brand voice profiles from shop samples
-- ============================================================================
CREATE TABLE IF NOT EXISTS brand_voice_profiles (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES shops(id) ON DELETE CASCADE,
  profile_text TEXT NOT NULL,
  profile_version INTEGER NOT NULL DEFAULT 1,
  is_current BOOLEAN DEFAULT true,
  user_edited BOOLEAN DEFAULT false,
  generated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  sample_ids UUID[] NOT NULL
);

-- Indexes for performance
CREATE INDEX idx_voice_profiles_user_id ON brand_voice_profiles(user_id);
CREATE INDEX idx_voice_profiles_current ON brand_voice_profiles(user_id, is_current) WHERE is_current = true;
CREATE INDEX idx_voice_profiles_version ON brand_voice_profiles(user_id, profile_version DESC);

-- Only one current profile per shop
CREATE UNIQUE INDEX idx_voice_profiles_one_current
  ON brand_voice_profiles(user_id)
  WHERE is_current = true;

-- RLS Policies - Allow service role full access
ALTER TABLE brand_voice_profiles ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Service role can manage voice profiles"
  ON brand_voice_profiles FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- ============================================================================
-- TABLE: generated_content
-- Description: Content pieces generated by the Content Creation Center
-- ============================================================================
CREATE TABLE IF NOT EXISTS generated_content (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES shops(id) ON DELETE CASCADE,
  content_type VARCHAR(50) NOT NULL CHECK (
    content_type IN ('blog', 'ad', 'store_copy', 'social_facebook', 'social_instagram', 'social_tiktok')
  ),
  platform VARCHAR(50) CHECK (platform IN ('facebook', 'instagram', 'tiktok')),
  topic TEXT NOT NULL,
  generated_text TEXT NOT NULL,
  word_count INTEGER NOT NULL,
  generation_params JSONB,
  product_images JSONB,
  is_saved BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_generated_content_user_id ON generated_content(user_id);
CREATE INDEX idx_generated_content_type ON generated_content(user_id, content_type);
CREATE INDEX idx_generated_content_saved ON generated_content(user_id, is_saved) WHERE is_saved = true;
CREATE INDEX idx_generated_content_created ON generated_content(user_id, created_at DESC);
CREATE INDEX idx_generated_content_platform ON generated_content(user_id, platform) WHERE platform IS NOT NULL;

-- JSONB indexes for querying generation parameters
CREATE INDEX idx_generated_content_params ON generated_content USING GIN (generation_params);

-- RLS Policies - Allow service role full access
ALTER TABLE generated_content ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Service role can manage generated content"
  ON generated_content FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- ============================================================================
-- HELPER FUNCTIONS
-- ============================================================================

-- Function to get current voice profile for a shop
CREATE OR REPLACE FUNCTION get_current_voice_profile(p_user_id UUID)
RETURNS brand_voice_profiles AS $$
  SELECT * FROM brand_voice_profiles
  WHERE user_id = p_user_id AND is_current = true
  LIMIT 1;
$$ LANGUAGE sql STABLE;

-- Function to count active samples for a shop
CREATE OR REPLACE FUNCTION count_active_samples(p_user_id UUID)
RETURNS INTEGER AS $$
  SELECT COUNT(*)::INTEGER FROM content_samples
  WHERE user_id = p_user_id AND is_active = true;
$$ LANGUAGE sql STABLE;

-- Function to set a voice profile as current (marks all others as not current)
CREATE OR REPLACE FUNCTION set_current_voice_profile(p_profile_id UUID, p_user_id UUID)
RETURNS VOID AS $$
BEGIN
  -- Mark all profiles as not current
  UPDATE brand_voice_profiles
  SET is_current = false
  WHERE user_id = p_user_id;

  -- Mark specified profile as current
  UPDATE brand_voice_profiles
  SET is_current = true
  WHERE id = p_profile_id AND user_id = p_user_id;
END;
$$ LANGUAGE plpgsql;

-- ============================================================================
-- COMMENTS FOR DOCUMENTATION
-- ============================================================================

COMMENT ON TABLE content_samples IS 'Shop-uploaded content samples for brand voice profile training';
COMMENT ON TABLE brand_voice_profiles IS 'AI-generated brand voice profiles from shop samples';
COMMENT ON TABLE generated_content IS 'Content pieces generated by the Content Creation Center';

COMMENT ON COLUMN content_samples.user_id IS 'References shops.id - shop that uploaded this sample';
COMMENT ON COLUMN content_samples.sample_type IS 'Type of content: blog, email, description, or other';
COMMENT ON COLUMN content_samples.word_count IS 'Word count must be between 500 and 5000';
COMMENT ON COLUMN content_samples.is_active IS 'Only active samples are used for voice profile generation';

COMMENT ON COLUMN brand_voice_profiles.user_id IS 'References shops.id - shop this profile belongs to';
COMMENT ON COLUMN brand_voice_profiles.profile_text IS 'AI-generated analysis of shop writing style, tone, and voice';
COMMENT ON COLUMN brand_voice_profiles.profile_version IS 'Incremental version number for profile history';
COMMENT ON COLUMN brand_voice_profiles.is_current IS 'Only one profile can be current per shop';
COMMENT ON COLUMN brand_voice_profiles.user_edited IS 'True if shop owner has manually edited the AI-generated profile';
COMMENT ON COLUMN brand_voice_profiles.sample_ids IS 'Array of content_sample IDs used to generate this profile';

COMMENT ON COLUMN generated_content.user_id IS 'References shops.id - shop this content was generated for';
COMMENT ON COLUMN generated_content.content_type IS 'Type of content: blog, ad, store_copy, or social_*';
COMMENT ON COLUMN generated_content.platform IS 'Social media platform (facebook, instagram, tiktok) if content_type is social_*';
COMMENT ON COLUMN generated_content.generation_params IS 'JSONB object storing word_count, tone_intensity, cta_type, etc.';
COMMENT ON COLUMN generated_content.product_images IS 'JSONB array of product image URLs for social posts';
COMMENT ON COLUMN generated_content.is_saved IS 'True if shop explicitly saved this content to library';

-- ============================================================================
-- GRANT PERMISSIONS TO SERVICE ROLE
-- ============================================================================
GRANT ALL ON TABLE content_samples TO service_role, postgres, authenticated, anon;
GRANT ALL ON TABLE brand_voice_profiles TO service_role, postgres, authenticated, anon;
GRANT ALL ON TABLE generated_content TO service_role, postgres, authenticated, anon;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO service_role, postgres, authenticated, anon;
